load (7,1); //The exception handler
load (8,2); //from 1,2 blocks to pages 7,8

load (9,3); // The Timer interrupt routine
load (10,4); // from 3,4 blocks to pages 9,10

load (11,5); // The interrupt 1 routine
load (12,6); // from 5,6 blocks to pages 11,12

load (23,17); // The interrupt 7 routine
load (24,18); // from 17,18 blocks to pages 23,24


[READY_LIST	+ 0*32] = 0; // Finding PCB from ready list and assigning PID = 0 for INIT
[READY_LIST + 1*32] = 1; // Finding PCB from ready list and assigning PID = 1 for First Process after INIT

//##################################################################################### 
load (25,21);
load (26,22); //load init from (21,22,23) blocks
load (27,23); // to (25,26,27) 										
																	// L O A D I N G -- P R O C E S S E S
load (29,25); //load code block for 'even' from 25th block in Disk (AFTER INIT)

//**************************************************************************************

PTBR = PAGE_TABLE + 0*8; //setting PTBR to correct location onm page table
PTLR = 4; // each process 4 pages

																	// I N I T -- P R O C E S S 
[PTBR + 0] = 25;   //Setting the Page Tabele Entry For The proces
[PTBR + 1] = "01"; // ->"" So that '0' is not truncated
[PTBR + 2] = 26;
[PTBR + 3] = "01";  // reference bit-> 0
[PTBR + 4] = 27;	// valid/invalid bit-> 1
[PTBR + 5] = "01";	// For each entry in table
[PTBR + 6] = 28; 
[PTBR + 7] = "01";	// page 28 -> STACK
																	// PCB setup
[READY_LIST + 0*32 + 1] = 2; //Setting Process State (in 2nd bit in PCB) as 2 (Running)

//**************************************************************************************
																	// P R O C E S S -1
alias PTBR_process1 S0; //---> Setting PAGETABLES for process 1
PTBR_process1 = PAGE_TABLE + 1*8; //Alias for PTBR in process 1

[PTBR_process1 + 0] = 29; //Loading first code block
[PTBR_process1 + 1] = "01"; //Setting up attributes as before. NOT referenced and valid
[PTBR_process1 + 2] = -1; //Invalid page no for logicval page
[PTBR_process1 + 3] = "00"; //not referenced and not valid
[PTBR_process1 + 4] = -1; 
[PTBR_process1 + 5] = "00";
[PTBR_process1 + 6] = 30; 
[PTBR_process1 + 7] = "01"; //The page for it's STACK
																	// PCB setup
[READY_LIST + 1*32 + 1] = 1; //Setting Process State (in 2nd bit in PCB) as 1 (READY)

[READY_LIST + 1*32 + 2]	= 3 * 512; // Setting SP as 3rd page
[READY_LIST + 1*32 + 3] = 3 * 512; // Setting BP as 3rd page
[READY_LIST + 1*32 + 4] = 0 * 512; // Setting IP as Logical Page 0

[READY_LIST + 1*32 + 5] = PTBR_process1;// PTBR 
[READY_LIST + 1*32 + 6] = 4; // PTLR

//**************************************************************************************



SP = 3 * 512; 	// This is the Logical Address (as is used in USER MODE after IRET)
				// Physical  == [(3* 512) / 512 ] -> 28 (from page table above (PTBR + 2*3))

[28 * 512] =0; 	// Physical location of stack is used to set value for SP in our process
				// so that IRET will change to USER MODE and then stack is popped
				// then logical 0 is loaded to IP ,after logical translation of SP.

ireturn;